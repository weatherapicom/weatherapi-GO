/*
 * weatherapi_lib
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */

package models_pkg



/*
 * Structure for the custom type CurrentJsonResponse
 */
type CurrentJsonResponse struct {
    Location        *Location       `json:"location,omitempty" form:"location,omitempty"` //TODO: Write general description for this field
    Current         *Current        `json:"current,omitempty" form:"current,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Location
 */
type Location struct {
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Local area name.
    Region          *string         `json:"region,omitempty" form:"region,omitempty"` //Local area region.
    Country         *string         `json:"country,omitempty" form:"country,omitempty"` //Country
    Lat             *float64        `json:"lat,omitempty" form:"lat,omitempty"` //Area latitude
    Lon             *float64        `json:"lon,omitempty" form:"lon,omitempty"` //Area longitude
    TzId            *string         `json:"tz_id,omitempty" form:"tz_id,omitempty"` //Time zone
    LocaltimeEpoch  *int64          `json:"localtime_epoch,omitempty" form:"localtime_epoch,omitempty"` //Local date and time in unix time
    Localtime       *string         `json:"localtime,omitempty" form:"localtime,omitempty"` //Local date and time
}

/*
 * Structure for the custom type Current
 */
type Current struct {
    LastUpdatedEpoch   *int64          `json:"last_updated_epoch,omitempty" form:"last_updated_epoch,omitempty"` //Local time when the real time data was updated in unix time.
    LastUpdated        *string         `json:"last_updated,omitempty" form:"last_updated,omitempty"` //Local time when the real time data was updated.
    TempC              *float64        `json:"temp_c,omitempty" form:"temp_c,omitempty"` //Temperature in celsius
    TempF              *float64        `json:"temp_f,omitempty" form:"temp_f,omitempty"` //Temperature in fahrenheit
    IsDay              *int64          `json:"is_day,omitempty" form:"is_day,omitempty"` //1 = Yes 0 = No <br />Whether to show day condition icon or night icon
    Condition          *Condition      `json:"condition,omitempty" form:"condition,omitempty"` //TODO: Write general description for this field
    WindMph            *float64        `json:"wind_mph,omitempty" form:"wind_mph,omitempty"` //Wind speed in miles per hour
    WindKph            *float64        `json:"wind_kph,omitempty" form:"wind_kph,omitempty"` //Wind speed in kilometer per hour
    WindDegree         *int64          `json:"wind_degree,omitempty" form:"wind_degree,omitempty"` //Wind direction in degrees
    WindDir            *string         `json:"wind_dir,omitempty" form:"wind_dir,omitempty"` //Wind direction as 16 point compass. e.g.: NSW
    PressureMb         *float64        `json:"pressure_mb,omitempty" form:"pressure_mb,omitempty"` //Pressure in millibars
    PressureIn         *float64        `json:"pressure_in,omitempty" form:"pressure_in,omitempty"` //Pressure in inches
    PrecipMm           *float64        `json:"precip_mm,omitempty" form:"precip_mm,omitempty"` //Precipitation amount in millimeters
    PrecipIn           *float64        `json:"precip_in,omitempty" form:"precip_in,omitempty"` //Precipitation amount in inches
    Humidity           *int64          `json:"humidity,omitempty" form:"humidity,omitempty"` //Humidity as percentage
    Cloud              *int64          `json:"cloud,omitempty" form:"cloud,omitempty"` //Cloud cover as percentage
    FeelslikeC         *float64        `json:"feelslike_c,omitempty" form:"feelslike_c,omitempty"` //Feels like temperature as celcius
    FeelslikeF         *float64        `json:"feelslike_f,omitempty" form:"feelslike_f,omitempty"` //Feels like temperature as fahrenheit
    VisKm              *float64        `json:"vis_km,omitempty" form:"vis_km,omitempty"` //TODO: Write general description for this field
    VisMiles           *float64        `json:"vis_miles,omitempty" form:"vis_miles,omitempty"` //TODO: Write general description for this field
    Uv                 *float64        `json:"uv,omitempty" form:"uv,omitempty"` //UV Index
    GustMph            *float64        `json:"gust_mph,omitempty" form:"gust_mph,omitempty"` //Wind gust in miles per hour
    GustKph            *float64        `json:"gust_kph,omitempty" form:"gust_kph,omitempty"` //Wind gust in kilometer per hour
}

/*
 * Structure for the custom type Condition
 */
type Condition struct {
    Text            *string         `json:"text,omitempty" form:"text,omitempty"` //Weather condition text
    Icon            *string         `json:"icon,omitempty" form:"icon,omitempty"` //Weather icon url
    Code            *int64          `json:"code,omitempty" form:"code,omitempty"` //Weather condition unique code.
}

/*
 * Structure for the custom type ForecastJsonResponse
 */
type ForecastJsonResponse struct {
    Location        *Location       `json:"location,omitempty" form:"location,omitempty"` //TODO: Write general description for this field
    Current         *Current        `json:"current,omitempty" form:"current,omitempty"` //TODO: Write general description for this field
    Forecast        *Forecast       `json:"forecast,omitempty" form:"forecast,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Forecast
 */
type Forecast struct {
    Forecastday     []*Forecastday  `json:"forecastday,omitempty" form:"forecastday,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Forecastday
 */
type Forecastday struct {
    Date            *string         `json:"date,omitempty" form:"date,omitempty"` //Forecast date
    DateEpoch       *int64          `json:"date_epoch,omitempty" form:"date_epoch,omitempty"` //Forecast date as unix time.
    Day             *Day            `json:"day,omitempty" form:"day,omitempty"` //See day element
    Astro           *Astro          `json:"astro,omitempty" form:"astro,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Day
 */
type Day struct {
    MaxtempC        *float64        `json:"maxtemp_c,omitempty" form:"maxtemp_c,omitempty"` //Maximum temperature in celsius for the day.
    MaxtempF        *float64        `json:"maxtemp_f,omitempty" form:"maxtemp_f,omitempty"` //Maximum temperature in fahrenheit for the day
    MintempC        *float64        `json:"mintemp_c,omitempty" form:"mintemp_c,omitempty"` //Minimum temperature in celsius for the day
    MintempF        *float64        `json:"mintemp_f,omitempty" form:"mintemp_f,omitempty"` //Minimum temperature in fahrenheit for the day
    AvgtempC        *float64        `json:"avgtemp_c,omitempty" form:"avgtemp_c,omitempty"` //Average temperature in celsius for the day
    AvgtempF        *float64        `json:"avgtemp_f,omitempty" form:"avgtemp_f,omitempty"` //Average temperature in fahrenheit for the day
    MaxwindMph      *float64        `json:"maxwind_mph,omitempty" form:"maxwind_mph,omitempty"` //Maximum wind speed in miles per hour
    MaxwindKph      *float64        `json:"maxwind_kph,omitempty" form:"maxwind_kph,omitempty"` //Maximum wind speed in kilometer per hour
    TotalprecipMm   *float64        `json:"totalprecip_mm,omitempty" form:"totalprecip_mm,omitempty"` //Total precipitation in milimeter
    TotalprecipIn   *float64        `json:"totalprecip_in,omitempty" form:"totalprecip_in,omitempty"` //Total precipitation in inches
    AvgvisKm        *float64        `json:"avgvis_km,omitempty" form:"avgvis_km,omitempty"` //Average visibility in kilometer
    AvgvisMiles     *float64        `json:"avgvis_miles,omitempty" form:"avgvis_miles,omitempty"` //Average visibility in miles
    Avghumidity     *float64        `json:"avghumidity,omitempty" form:"avghumidity,omitempty"` //Average humidity as percentage
    Condition       *Condition      `json:"condition,omitempty" form:"condition,omitempty"` //TODO: Write general description for this field
    Uv              *float64        `json:"uv,omitempty" form:"uv,omitempty"` //UV Index
}

/*
 * Structure for the custom type Astro
 */
type Astro struct {
    Sunrise         *string         `json:"sunrise,omitempty" form:"sunrise,omitempty"` //Sunrise time
    Sunset          *string         `json:"sunset,omitempty" form:"sunset,omitempty"` //Sunset time
    Moonrise        *string         `json:"moonrise,omitempty" form:"moonrise,omitempty"` //Moonrise time
    Moonset         *string         `json:"moonset,omitempty" form:"moonset,omitempty"` //Moonset time
}

/*
 * Structure for the custom type HistoryJsonResponse
 */
type HistoryJsonResponse struct {
    Location        *Location       `json:"location,omitempty" form:"location,omitempty"` //TODO: Write general description for this field
    Current         *Current        `json:"current,omitempty" form:"current,omitempty"` //TODO: Write general description for this field
    Forecast        *Forecast1      `json:"forecast,omitempty" form:"forecast,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Forecast1
 */
type Forecast1 struct {
    Forecastday     []*Forecastday1 `json:"forecastday,omitempty" form:"forecastday,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Forecastday1
 */
type Forecastday1 struct {
    Date            *string         `json:"date,omitempty" form:"date,omitempty"` //Forecast date
    DateEpoch       *int64          `json:"date_epoch,omitempty" form:"date_epoch,omitempty"` //Forecast date as unix time.
    Day             *Day            `json:"day,omitempty" form:"day,omitempty"` //See day element
    Astro           *Astro          `json:"astro,omitempty" form:"astro,omitempty"` //TODO: Write general description for this field
    Hour            []*Hour         `json:"hour,omitempty" form:"hour,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Hour
 */
type Hour struct {
    TimeEpoch       *int64          `json:"time_epoch,omitempty" form:"time_epoch,omitempty"` //Time as epoch
    Time            *string         `json:"time,omitempty" form:"time,omitempty"` //Date and time
    TempC           *float64        `json:"temp_c,omitempty" form:"temp_c,omitempty"` //Temperature in celsius
    TempF           *float64        `json:"temp_f,omitempty" form:"temp_f,omitempty"` //Temperature in fahrenheit
    IsDay           *int64          `json:"is_day,omitempty" form:"is_day,omitempty"` //1 = Yes 0 = No <br />Whether to show day condition icon or night icon
    Condition       *Condition      `json:"condition,omitempty" form:"condition,omitempty"` //TODO: Write general description for this field
    WindMph         *float64        `json:"wind_mph,omitempty" form:"wind_mph,omitempty"` //Wind speed in miles per hour
    WindKph         *float64        `json:"wind_kph,omitempty" form:"wind_kph,omitempty"` //Wind speed in kilometer per hour
    WindDegree      *int64          `json:"wind_degree,omitempty" form:"wind_degree,omitempty"` //Wind direction in degrees
    WindDir         *string         `json:"wind_dir,omitempty" form:"wind_dir,omitempty"` //Wind direction as 16 point compass. e.g.: NSW
    PressureMb      *float64        `json:"pressure_mb,omitempty" form:"pressure_mb,omitempty"` //Pressure in millibars
    PressureIn      *float64        `json:"pressure_in,omitempty" form:"pressure_in,omitempty"` //Pressure in inches
    PrecipMm        *float64        `json:"precip_mm,omitempty" form:"precip_mm,omitempty"` //Precipitation amount in millimeters
    PrecipIn        *float64        `json:"precip_in,omitempty" form:"precip_in,omitempty"` //Precipitation amount in inches
    Humidity        *int64          `json:"humidity,omitempty" form:"humidity,omitempty"` //Humidity as percentage
    Cloud           *int64          `json:"cloud,omitempty" form:"cloud,omitempty"` //Cloud cover as percentage
    FeelslikeC      *float64        `json:"feelslike_c,omitempty" form:"feelslike_c,omitempty"` //Feels like temperature as celcius
    FeelslikeF      *float64        `json:"feelslike_f,omitempty" form:"feelslike_f,omitempty"` //Feels like temperature as fahrenheit
    VisKm           *float64        `json:"vis_km,omitempty" form:"vis_km,omitempty"` //TODO: Write general description for this field
    VisMiles        *float64        `json:"vis_miles,omitempty" form:"vis_miles,omitempty"` //TODO: Write general description for this field
    Uv              *float64        `json:"uv,omitempty" form:"uv,omitempty"` //UV Index
    GustMph         *float64        `json:"gust_mph,omitempty" form:"gust_mph,omitempty"` //Wind gust in miles per hour
    GustKph         *float64        `json:"gust_kph,omitempty" form:"gust_kph,omitempty"` //Wind gust in kilometer per hour
}

/*
 * Structure for the custom type SearchJsonResponse
 */
type SearchJsonResponse struct {
    Id              *int64          `json:"id,omitempty" form:"id,omitempty"` //TODO: Write general description for this field
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Local area name.
    Region          *string         `json:"region,omitempty" form:"region,omitempty"` //Local area region.
    Country         *string         `json:"country,omitempty" form:"country,omitempty"` //Country
    Lat             *float64        `json:"lat,omitempty" form:"lat,omitempty"` //Area latitude
    Lon             *float64        `json:"lon,omitempty" form:"lon,omitempty"` //Area longitude
    Url             *string         `json:"url,omitempty" form:"url,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type IpJsonResponse
 */
type IpJsonResponse struct {
    Ip              *string         `json:"ip,omitempty" form:"ip,omitempty"` //IP address
    Type            *string         `json:"type,omitempty" form:"type,omitempty"` //ipv4 or ipv6
    ContinentCode   *string         `json:"continent_code,omitempty" form:"continent_code,omitempty"` //Continent code
    ContinentName   *string         `json:"continent_name,omitempty" form:"continent_name,omitempty"` //Continent name
    CountryCode     *string         `json:"country_code,omitempty" form:"country_code,omitempty"` //Country code
    CountryName     *string         `json:"country_name,omitempty" form:"country_name,omitempty"` //Name of country
    IsEu            *bool           `json:"is_eu,omitempty" form:"is_eu,omitempty"` //true or false
    GeonameId       *int64          `json:"geoname_id,omitempty" form:"geoname_id,omitempty"` //Geoname ID
    City            *string         `json:"city,omitempty" form:"city,omitempty"` //City name
    Region          *string         `json:"region,omitempty" form:"region,omitempty"` //Region name
    Lat             *float64        `json:"lat,omitempty" form:"lat,omitempty"` //Latitude in decimal degree
    Lon             *float64        `json:"lon,omitempty" form:"lon,omitempty"` //Longitude in decimal degree
    TzId            *string         `json:"tz_id,omitempty" form:"tz_id,omitempty"` //Time zone
    LocaltimeEpoch  *int64          `json:"localtime_epoch,omitempty" form:"localtime_epoch,omitempty"` //Local time as epoch
    Localtime       *string         `json:"localtime,omitempty" form:"localtime,omitempty"` //Date and time
}

/*
 * Structure for the custom type TimezoneJsonResponse
 */
type TimezoneJsonResponse struct {
    Name            *string         `json:"name,omitempty" form:"name,omitempty"` //Local area name.
    Region          *string         `json:"region,omitempty" form:"region,omitempty"` //Local area region.
    Country         *string         `json:"country,omitempty" form:"country,omitempty"` //Country
    Lat             *float64        `json:"lat,omitempty" form:"lat,omitempty"` //Area latitude
    Lon             *float64        `json:"lon,omitempty" form:"lon,omitempty"` //Area longitude
    TzId            *string         `json:"tz_id,omitempty" form:"tz_id,omitempty"` //Time zone
    LocaltimeEpoch  *int64          `json:"localtime_epoch,omitempty" form:"localtime_epoch,omitempty"` //Local date and time in unix time
    Localtime       *string         `json:"localtime,omitempty" form:"localtime,omitempty"` //Local date and time
}

/*
 * Structure for the custom type AstronomyJsonResponse
 */
type AstronomyJsonResponse struct {
    Location        *Location       `json:"location,omitempty" form:"location,omitempty"` //TODO: Write general description for this field
    Astronomy       *Astronomy      `json:"astronomy,omitempty" form:"astronomy,omitempty"` //TODO: Write general description for this field
}

/*
 * Structure for the custom type Astronomy
 */
type Astronomy struct {
    Astro           *Astro          `json:"astro,omitempty" form:"astro,omitempty"` //TODO: Write general description for this field
}
